services:
  plugin:
    # image: ghcr.io/hasura/engine-plugin-restified-endpoint:latest
    build:
      context: ..
    ports:
      - 8787:8787
    environment:
      OTEL_SERVICE_NAME: "plugin"
      HASURA_DDN_PLUGIN_CONFIG_PATH: "/config"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger:4317"
      GRAPHQL_SERVER_URL: "http://engine:3000/graphql"
    volumes:
      - type: bind
        source: ./config/plugin/
        target: /config/
        read_only: true

  # A sample DDN project that uses the plugin to cache requests. Running
  # `docker compose up engine plugin` will give you a working GraphiQL
  # interface at `localhost:8081` to explore.

  engine:
    image: ghcr.io/hasura/v3-engine:dev-main
    platform: linux/amd64
    init: true
    ports:
      - 8081:3000
    environment:
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://jaeger:4317"
      OTEL_SERVICE_NAME: "engine"
      RUST_LOG: "DEBUG"
    volumes:
      - type: bind
        source: ./config/v3-engine/auth_config.json
        target: /auth_config.json
      - type: bind
        source: ./config/v3-engine/engine-metadata.json
        target: /engine-metadata.json
        read_only: true
    command:
      - --metadata-path=/engine-metadata.json
      - --authn-config-path=/auth_config.json
    depends_on:
      connector:
        condition: service_started
      jaeger:
        condition: service_started

  connector:
    image: ghcr.io/hasura/ndc-postgres:dev-main
    ports:
      - 8080
    environment:
      OTEL_SERVICE_NAME: "postgres-connector"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://jaeger:4317"
      CONNECTION_URI: "postgresql://postgres:password@datasource/chinook"
    volumes:
      - type: bind
        source: ./config/ndc-postgres
        target: /etc/connector
        read_only: true
    depends_on:
      jaeger:
        condition: service_started
      datasource:
        condition: service_healthy

  datasource:
    build:
      context: ./build/postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: "password"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  jaeger:
    image: jaegertracing/all-in-one:1.56
    restart: always
    ports:
      - 4003:16686
      - 4318:4318
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
